<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qzh blog</title>
  
  <subtitle>做一些有趣的事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shuaiqzh.com/"/>
  <updated>2018-05-21T05:03:35.000Z</updated>
  <id>http://shuaiqzh.com/</id>
  
  <author>
    <name>乔某某</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://shuaiqzh.com/hello-world/"/>
    <id>http://shuaiqzh.com/hello-world/</id>
    <published>2020-02-17T07:48:07.041Z</published>
    <updated>2018-05-21T05:03:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>新版SteamVR Unity Plugin的InteractionSystem</title>
    <link href="http://shuaiqzh.com/%E6%96%B0%E7%89%88SteamVR-Unity-Plugin%E7%9A%84InteractionSystem/"/>
    <id>http://shuaiqzh.com/%E6%96%B0%E7%89%88SteamVR-Unity-Plugin%E7%9A%84InteractionSystem/</id>
    <published>2020-01-16T10:28:25.000Z</published>
    <updated>2020-01-16T10:39:23.124Z</updated>
    
    <content type="html"><![CDATA[<p>最近写VR项目的时候用到了SteamVR Unity Plugin - v2.0.1插件，感觉比之前用到的SteamVR plugin for Unity - v1.2.2版本改进了很多，就算不用VRTK插件，也能实现很多交互操作了。在此记录一下新版本插件的中的主要内容。（主要是根据InteractionSystem文档和自己的理解）</p><p>这个InteractionSystem包括一系列脚本，预制件和其他资产资源，这个系统专门设计的轻巧灵活。。其中大多数包含的组件在实际案例中都运用到了，但也包括一些没有在案例中用到的组件，但是它可能也是有用的。</p><h3 id="1-首先概述一下示例场景中包括的预制件和脚本主要的功能："><a href="#1-首先概述一下示例场景中包括的预制件和脚本主要的功能：" class="headerlink" title="1.首先概述一下示例场景中包括的预制件和脚本主要的功能："></a>1.首先概述一下示例场景中包括的预制件和脚本主要的功能：</h3><p>Player：这个预制件是整个系统的核心，大多数其他组件都依赖于player<br>Teleporting：传送预制件处理所有关于传送的逻辑。<br>InteractableExample：这个类是一个和手柄进行简单交互的类。会接收手柄发来的信息并作出反应。<br>Throwables：这个展示了在游戏中怎样使用交互系统来创建一些更复杂的能够被使用的对象。<br>UI&amp;Hints：这个显示了交互系统如何处理提示。并且如何使用它和Unity UI控件像按钮一样进行交互。<br>LinearDrive：这是一个稍微复杂的交互，可以通过简单的直线移动操作对象来控制的目标对象进行螺旋上升和下降。<br>CircularDrive：这个类主要实现了通过手柄控制一个圆盘的转动<br>Longbow：这是案例中使用的长弓。是这个系统创建的更复杂的对象之一。</p><h3 id="2-简单介绍交互系统"><a href="#2-简单介绍交互系统" class="headerlink" title="2.简单介绍交互系统"></a>2.简单介绍交互系统</h3><p>交互系统的核心是Player，Hand和Interactable类。Player预制件为场景设置play对象和SteamVR摄像机。这个交互系统通过发送信息给场景中所有可以和手柄进行交互的对象，这个对象再对接收的信息作出反应。并可以设置对象附着到手柄上。为了接收手的信息只要添加Interactable组件到对象上，这个对象就可以根据手的信息作出相应的悬停监测。还包括了一些常用的可交互方式，例如Throwable（扔）或者LinearDrive（直线移动物体）。Player预制件也创建了一个用于模仿鼠标事件可以简单地用Unity UI控件控制的输入模式。交互系统也包括一个传统的第一人称摄像机，用键盘和鼠标控制。鼠标就类似人的一只手一样。当开发者没有VR头显时，这个模式就非常有用了。</p><h3 id="3-Player类的功能介绍"><a href="#3-Player类的功能介绍" class="headerlink" title="3.Player类的功能介绍"></a>3.Player类的功能介绍</h3><p>-Player类是一个单例，意味着在一个场景中只有一个Player对象。<br>-Player主要功能是持续追踪手柄和头显。<br>-它可以在整个项目中全局访问，并且交互系统的许多方面都假定Player对象始终存在于场景中。<br>-不管是VR模式还是2D fallback模式，它都保持追踪。<br>-通过Player类使用访问器允许其他组件以类似的方式运行，而不知道是否正在使用VR头显或鼠标/键盘。<br>-2D fallback模式虽然有用，但仍然有限制。此模式主要用于测试非常简单的交互，仅限于一个手和触发按钮。它对于一个团队在开发中，并不能保证每个人一直都有一个VR头显和控制器设备。<br>-Player的一些有用的属性：<br>-hmdTransform:一只返回当前摄像机的transform。可能是VR头显和2D fallback camera。<br>-feetPositionGuess:根据头显的位置猜测玩家脚的位置。但不能准确知道脚的位置，根据玩家的站立方式，这可能非常不准确。<br>-bodyDirectionGuess:类似于feetPositionGuess，根据玩家的站立方式，这可能非常不准确。<br>注意：在编辑场景中，player类设置使用icons显示feet和hands。但由于unity工作方式，需要将Core/icons移动到根目录下Gizmos中，才能起作用。<br>-关闭2D fallback mode的两种方式：<br>1、在build之前，将player的属性面板中Allow Toggle To 2D取消勾选<br>2、在PlayerSetting.Player中Scripting Define Symbols增加HIDE_DEBUG_UI。这将会在build时取消2D debug view，但允许在编辑器中使用。</p><h3 id="4-Hand类的功能介绍"><a href="#4-Hand类的功能介绍" class="headerlink" title="4.Hand类的功能介绍"></a>4.Hand类的功能介绍</h3><p>-Hand类为交互系统完成了大部分繁重工作。<br>-Hand检测正在悬停的对象（Interactables）并根据当前的悬停状态向它们发送消息。<br>-hand在同一时间只能悬停在一个对象，在相同时间只能有一只hand能悬停在一个对象。<br>-对象可以附着在手柄上，也可以从手柄上分离。只有一个对象可以是手柄的焦点对象，但是同时可以将多个对象附加到手柄上。<br>-一旦一个对象从手柄上分离，那么之前附着在手柄上的对象（仍然附着在手柄上）会成为手柄的焦点对象。<br>-当手柄上没有任何东西时，它将始终显示手柄控制器。<br>-当对象一旦附着在手柄上时，可以给附着在手柄上的对象可以设置一个附着标志物UI来确定手柄和对象的行为。<br>-根据情况，可以锁定手柄以悬停在其他物体或任何物体上。<br>-这些是hand发送给交互物体的信息：<br>OnHandHoverBegin: 当手柄首次开始悬停在对象上时发送<br>HandHoverUpdate: 悬停在对象上时，每一帧都发送信息<br>OnHandHoverEnd: 当手柄停止悬停在对象上时发送<br>OnAttachedToHand: 当对象附加到手柄上时发送<br>-HandAttachedUpdate: 附加到手柄上时，每一帧都发送信息<br>OnDetachedFromHand: 当对象从手柄中分离时发送<br>OnHandFocusLost: 当附加对象失去焦点时发送，因为其他东西已附加到手柄上<br>OnHandFocusAcquired: 附加对象获得焦点时发送，因为前一个焦点对象已从手柄中分离</p><ul><li>这些是手柄发送给其子对象的消息：<br>OnHandInitialized: 通过将自己与SteamVR跟踪控制器的设备ID相关联来首次初始化手柄时发送<br>OnParentHandHoverBegin: 当手柄开始悬停在某物上时发送<br>OnParentHandHoverEnd: 当手柄停止悬停在某物上时发送<br>OnParentHandInputFocusAcquired: 当游戏窗口获得输入焦点时发送<br>OnParentHandInputFocusLost: 当游戏窗口失去输入焦点时发送</li><li>这些成员处理附加和分离：<br>AttachObject: 将传入的附加标签设置在附着对象上<br>DetachObject: Detaches the object from the hand and optionally restores it to its original parent currentAttachedObject: This returns the in-focus attached object on the hand,if any</li><li>Hand还有一些有用的属性和函数可用于自定义其行为：<br>OtherHand: 这是玩家控制的另一只手柄。这对于需要用两个手柄交互的对象（例如长弓）非常有用。<br>HoverSphereTransform and Radius: 这可用于自定义手柄的悬停范围。<br>HoverLayerMask: 这可以改变，以便手柄只悬停在某些层中的对象上。<br>HoverUpdateInterval: 根据游戏的要求，可以设置进行悬停检测的时间间隔。<br>HoverLock/Unlock: 这用于使手柄仅悬停在某个对象上。当hover locked时，传入为null将使得手柄不会悬停在任何东西上。此技术用于在传送arc处于活动状态时使手柄不悬停在对象上<br>GetStandardInteractionButton/Up/Down: 这些用于检查手柄上的扳机的状态。 这对于也可以与2D fallback一起使用的简单对象非常有用。 在2D fallback情况下，左键单击用作标准交互按钮，对象的行为相同。<br>GuessCurrentHandType: 这使用一些SteamVR函数来确定哪个手柄最左边哪个是最右边的。<br>GetAttachmentTransform: 物体可以使用手上的“attachment transforms”来弄清楚如何附着到手柄上的transform。</li></ul><h3 id="5-Interactable类更像是一个标识符。它向Hand标识该对象是可交互的。具有此组件的任何对象都将从Hand接收相关消息。"><a href="#5-Interactable类更像是一个标识符。它向Hand标识该对象是可交互的。具有此组件的任何对象都将从Hand接收相关消息。" class="headerlink" title="5.Interactable类更像是一个标识符。它向Hand标识该对象是可交互的。具有此组件的任何对象都将从Hand接收相关消息。"></a>5.Interactable类更像是一个标识符。它向Hand标识该对象是可交互的。具有此组件的任何对象都将从Hand接收相关消息。</h3><p>仅使用以上这3个组件，就可以能够创建许多不同且复杂的交互式对象。</p><h3 id="6-Throwable类的主要功能："><a href="#6-Throwable类的主要功能：" class="headerlink" title="6.Throwable类的主要功能："></a>6.Throwable类的主要功能：</h3><p>这是最基本的交互式对象之一。</p><ul><li>当手柄在其上悬停并按下交互键（扳机）时，玩家可以拾取此对象。</li><li>按下扳机时，物体会附在手柄上并保持在那里。</li><li>当释放扳机时，手柄的速度都会赋给抛出对象。</li><li>这可以创建可以拾取和抛出的基本对象。</li></ul><p>7.LinearDrive类的主要功能是允许用手柄在开始和结束点之间移动对象，对象的当前位置用于设置LinearMapping。</p><p>8.CircularDrive类的主要功能是允许用手柄控制圆盘转动。对象的当前位置用于设置LinearMapping。</p><p>9.LinearMapping值由LinearDrive和CircularDive设置<br>-映射可用于将简单的手部交互映射到更复杂的行为。<br>-一个例子是长弓中的字符串，它使用LinearMapping将弓弦的拉动映射到长弓拉回动画。<br>-几个其他类使用该映射来插入其属性<br>LinearAnimation<br>LinearAnimator<br>LinearBlendShape<br>LinearDisplacement<br>HapticRack</p><p>10.VelocityEstimator类可用于根据对象位置的变化估计对象的速度和加速度。在大多数情况下，如果从实际控制器获得速度和加速度，将获得更准确的结果，但有时这是不可能的，例如使用2Dfallback hand时。</p><p>11.IgnoreHovering类主要功能是，当你希望某对象不进行悬停检查时，则可以将此组件添加到该对象或特定的碰撞器上。</p><p>12.UIElement类的主要功能：<br>将此组件添加到unity的UI控件上，则手就可以与UI进行交互。<br>这将生成基于手部交互的鼠标悬停和单击事件，并通过Unity事件系统发送它们以使用现有的UI控件。<br>此外，它还将生成一个OnHandClick事件，该事件也将传递到点击的那个手柄。</p><p>13.ItemPackage类的主要功能：<br>-ItemPackage是用于暂时覆盖手柄的功能的对象集合<br>-在长弓的例子中，当长弓被手柄拿起后，长弓和手柄就结合在一起，并暂时替代手柄的功能。<br>-ItenPackages的概念是能够捡起和放回到物体被捡起的地方。<br>-一旦附带ItemPackage组件的对象被拿起，此对象会附着在手柄上，直到此对象被放回。不需要按钮就可以让此对象保持在手柄上。手柄仍然可以正常的传递消息（与场景中的对象交互），但此对象通常会禁用手柄的某些功能，例如手柄的悬停功能。</p><p>14.ItemPackageSpawner脚本处理产生和收起ItemPackage时的逻辑，以及如何在产生后将物品附加到手柄上。还可以处理拾取对象的展示和预览或者拾取对象的轮廓。</p><p>15.ItemPackageReference可以将此组件添加到对象以指示它是组合对象的一部分。</p><p>16.PlaySound这个类允许使用更多参数来使用AudioClips。可以接收多个AudioClips并且每次随机播放一个。还可以随机播放剪辑的方式。</p><p>17.SoundPlayOneShot类专门用于播放一次且不循环播放的声音或者需要在播放时暂停的声音。</p><p>18.Util类中全是interaction system中用到的工具方法。</p><p>19.InteractableHoverEvents当收到手柄传递的信息时这个类生成UnityEvents。</p><p>20.InteractableButtonEvents此类将手柄按钮输入转换为UnityEvents。</p><p>21.ComplexThrowable类当手接触对象时使用物理关节而不是simple parenting，这允许在手接触对象时进行更多基于物理的交互。<br>注意：这个类是实验性的，还没有真正运用到场景中，此类的功能是不完整的并且可能有错误。</p><p>22.DistanceHaptics基于两个transform之间的距离触发手柄的震动反馈。</p><p>23.Player（Prefab）功能<br>-这是交互系统的单个部分，它结合了所有基本部分<br>-这个预制件管理玩家和手部，使他们都可以轻松访问。<br>-包括所有SteamVR和2Dfallback的设置<br>-交互系统的大多数的组件都依赖于Player预制件，并且一些组件假设player和hand都用这种方式设置。<br>-每个场景只有一个。</p><p>24.BlankCOntroller（Prefab）当手柄没有接触任何东西时使用，控制器的渲染模型通过SteamVR加载，其所有部件都是铰接式（articulated）的。</p><h2 id="获取手柄状态-以及展示手柄面板的代码"><a href="#获取手柄状态-以及展示手柄面板的代码" class="headerlink" title="获取手柄状态 以及展示手柄面板的代码"></a>获取手柄状态 以及展示手柄面板的代码</h2><p><img src="https://img-blog.csdnimg.cn/20200106141537883.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/202001061415538.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近写VR项目的时候用到了SteamVR Unity Plugin - v2.0.1插件，感觉比之前用到的SteamVR plugin for Unity - v1.2.2版本改进了很多，就算不用VRTK插件，也能实现很多交互操作了。在此记录一下新版本插件的中的主要内容。（
      
    
    </summary>
    
    
    
      <category term="SteamVR" scheme="http://shuaiqzh.com/tags/SteamVR/"/>
    
      <category term="InteractionSystem 交互系统" scheme="http://shuaiqzh.com/tags/InteractionSystem-%E4%BA%A4%E4%BA%92%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>unity 连接数据库 打包问题</title>
    <link href="http://shuaiqzh.com/unity-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://shuaiqzh.com/unity-%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%89%93%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-16T10:28:15.000Z</published>
    <updated>2020-01-16T10:37:36.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总共出现了两个问题"><a href="#总共出现了两个问题" class="headerlink" title="总共出现了两个问题"></a>总共出现了两个问题</h1><h2 id="问题1-打包出错"><a href="#问题1-打包出错" class="headerlink" title="问题1 打包出错"></a>问题1 打包出错</h2><p>把api level改成 <strong>.net 2.0</strong><br><img src="https://img-blog.csdnimg.cn/20191202161600260.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="问题2-打包后连接不上数据库"><a href="#问题2-打包后连接不上数据库" class="headerlink" title="问题2 打包后连接不上数据库"></a>问题2 打包后连接不上数据库</h2><p>在你的unity编辑器的这个文件里<strong>Unity Editor\2017.4.27f1\Editor\Data\Mono\lib\mono\2.0</strong>（我用的2017.4 你们看各自的版本）找到下图的三个dll库 放在项目的Plugins文件夹里</p><p><img src="https://img-blog.csdnimg.cn/20191202161750690.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总共出现了两个问题&quot;&gt;&lt;a href=&quot;#总共出现了两个问题&quot; class=&quot;headerlink&quot; title=&quot;总共出现了两个问题&quot;&gt;&lt;/a&gt;总共出现了两个问题&lt;/h1&gt;&lt;h2 id=&quot;问题1-打包出错&quot;&gt;&lt;a href=&quot;#问题1-打包出错&quot; class=&quot;
      
    
    </summary>
    
    
    
      <category term="Unity连接MySQL" scheme="http://shuaiqzh.com/tags/Unity%E8%BF%9E%E6%8E%A5MySQL/"/>
    
  </entry>
  
  <entry>
    <title>unity3d：激活码系统（根据PC机器码，给对应激活码完成软件注册）</title>
    <link href="http://shuaiqzh.com/unity3d%EF%BC%9A%E6%BF%80%E6%B4%BB%E7%A0%81%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%A0%B9%E6%8D%AEPC%E6%9C%BA%E5%99%A8%E7%A0%81%EF%BC%8C%E7%BB%99%E5%AF%B9%E5%BA%94%E6%BF%80%E6%B4%BB%E7%A0%81%E5%AE%8C%E6%88%90%E8%BD%AF%E4%BB%B6%E6%B3%A8%E5%86%8C%EF%BC%89/"/>
    <id>http://shuaiqzh.com/unity3d%EF%BC%9A%E6%BF%80%E6%B4%BB%E7%A0%81%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%A0%B9%E6%8D%AEPC%E6%9C%BA%E5%99%A8%E7%A0%81%EF%BC%8C%E7%BB%99%E5%AF%B9%E5%BA%94%E6%BF%80%E6%B4%BB%E7%A0%81%E5%AE%8C%E6%88%90%E8%BD%AF%E4%BB%B6%E6%B3%A8%E5%86%8C%EF%BC%89/</id>
    <published>2020-01-16T10:28:04.000Z</published>
    <updated>2020-01-16T10:32:09.167Z</updated>
    
    <content type="html"><![CDATA[<p>1.机器码为明文，采用DES加密<br>2.判断输入激活码与机器码的密文一致，激活成功</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">KeyScene</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KeyMgr</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> m_titleName;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> m_projectName;</span><br><span class="line">        <span class="keyword">string</span> m_sMachineCode;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> m_nextScene;</span><br><span class="line">        <span class="keyword">public</span> Text m_machineCode;</span><br><span class="line">        <span class="keyword">public</span> InputField m_inputActice;</span><br><span class="line">        <span class="keyword">public</span> Text m_title;</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Button m_btnCopy;</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Button m_btnActive;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Text m_hint;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> m_miMa;</span><br><span class="line">        <span class="keyword">string</span> m_path;</span><br><span class="line">        <span class="keyword">string</span> m_fileName = <span class="string">"mi.json"</span>;</span><br><span class="line">        <span class="keyword">string</span> m_allPath;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> GameObject m_panel;</span><br><span class="line">        <span class="comment">// Use this for initialization</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            m_sMachineCode = m_projectName + SystemInfo.deviceUniqueIdentifier;</span><br><span class="line">            m_miMa = DesTool.EncryptString(m_sMachineCode, <span class="string">"subor123"</span>);</span><br><span class="line">            Debug.Log(m_miMa);</span><br><span class="line">            m_path = UnityEngine.Application.streamingAssetsPath;</span><br><span class="line">            m_allPath = m_path + <span class="string">"/"</span> + m_fileName;</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(m_allPath) == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">string</span> sContent = GetJsonString(m_allPath);</span><br><span class="line">                <span class="keyword">if</span> (sContent == m_miMa)</span><br><span class="line">                &#123;</span><br><span class="line">                    SceneManager.LoadScene(m_nextScene);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    m_panel.SetActive(<span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                m_panel.SetActive(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            m_machineCode.text = m_sMachineCode;</span><br><span class="line">            m_title.text = m_titleName;</span><br><span class="line"></span><br><span class="line">            m_btnActive.onClick.AddListener(OnBtnActive);</span><br><span class="line">            m_btnCopy.onClick.AddListener(OnBtnCopy);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnBtnActive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span> active = m_inputActice.text;</span><br><span class="line">            <span class="keyword">if</span> (active == m_miMa)</span><br><span class="line">            &#123;</span><br><span class="line">                </span><br><span class="line">                m_hint.text = <span class="string">"激活成功"</span>;</span><br><span class="line">                m_hint.color = Color.green;</span><br><span class="line">                m_hint.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">                m_panel.SetActive(<span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//保存文本</span></span><br><span class="line">                SaveJsonString(active, m_allPath);</span><br><span class="line">                SceneManager.LoadScene(m_nextScene);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                m_hint.text = <span class="string">"激活失败"</span>;</span><br><span class="line">                m_hint.color = Color.red;</span><br><span class="line">                m_hint.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnBtnCopy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            System.Windows.Forms.Clipboard.SetDataObject(m_sMachineCode);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SaveJsonString</span>(<span class="params"><span class="keyword">string</span> JsonString, <span class="keyword">string</span> path</span>)    <span class="comment">//保存Json格式字符串</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//写入Json数据</span></span><br><span class="line">            <span class="keyword">if</span> (File.Exists(path) == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                File.Delete(path);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> onlyPath = GetOnlyPath(path);</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(onlyPath))</span><br><span class="line">            &#123;</span><br><span class="line">                Directory.CreateDirectory(onlyPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FileInfo file = <span class="keyword">new</span> FileInfo(path);</span><br><span class="line">            StreamWriter writer = file.CreateText();</span><br><span class="line">            writer.Write(JsonString);</span><br><span class="line">            writer.Close();</span><br><span class="line">            writer.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">string</span> <span class="title">GetJsonString</span>(<span class="params"><span class="keyword">string</span> path</span>)     <span class="comment">//从文件里面读取json数据</span></span></span><br><span class="line"><span class="function"></span>        &#123;<span class="comment">//读取Json数据</span></span><br><span class="line">            StreamReader reader = <span class="keyword">new</span> StreamReader(path);</span><br><span class="line">            <span class="keyword">string</span> jsonData = reader.ReadToEnd();</span><br><span class="line">            reader.Close();</span><br><span class="line">            reader.Dispose();</span><br><span class="line">            <span class="keyword">return</span> jsonData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetOnlyPath</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">string</span>[] bufPath = path.Split(<span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">string</span> name = bufPath[bufPath.Length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">string</span> onlyPath = path.Replace(name, <span class="string">""</span>);</span><br><span class="line">            <span class="comment">//string abPath = info.m_prefabName.Replace("/" + abName, "");</span></span><br><span class="line">            <span class="comment">//string[] bufAbName = abName.Split('.');</span></span><br><span class="line">            <span class="keyword">return</span> onlyPath;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Des加密类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DesTool</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> 密钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static string key = "abcd1234";                                   //密钥(长度必须8位以上)   </span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> DES加密</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">EncryptString</span>(<span class="params"><span class="keyword">string</span> pToEncrypt,<span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        DESCryptoServiceProvider des = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] inputByteArray = Encoding.UTF8.GetBytes(pToEncrypt);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        des.Key = UTF8Encoding.UTF8.GetBytes(key);</span><br><span class="line"></span><br><span class="line">        des.IV = UTF8Encoding.UTF8.GetBytes(key);</span><br><span class="line"></span><br><span class="line">        MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">        CryptoStream cs = <span class="keyword">new</span> CryptoStream(ms, des.CreateEncryptor(), CryptoStreamMode.Write);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cs.Write(inputByteArray, <span class="number">0</span>, inputByteArray.Length);</span><br><span class="line"></span><br><span class="line">        cs.FlushFinalBlock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">byte</span> b <span class="keyword">in</span> ms.ToArray())</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            ret.AppendFormat(<span class="string">"&#123;0:X2&#125;"</span>, b);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ret.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret.ToString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> DES解密</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">DecryptString</span>(<span class="params"><span class="keyword">string</span> pToDecrypt,<span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">        DESCryptoServiceProvider des = <span class="keyword">new</span> DESCryptoServiceProvider();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] inputByteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[pToDecrypt.Length / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; pToDecrypt.Length / <span class="number">2</span>; x++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = (Convert.ToInt32(pToDecrypt.Substring(x * <span class="number">2</span>, <span class="number">2</span>), <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            inputByteArray[x] = (<span class="keyword">byte</span>)i;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        des.Key = UTF8Encoding.UTF8.GetBytes(key);</span><br><span class="line"></span><br><span class="line">        des.IV = UTF8Encoding.UTF8.GetBytes(key);</span><br><span class="line"></span><br><span class="line">        MemoryStream ms = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">        CryptoStream cs = <span class="keyword">new</span> CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write);</span><br><span class="line"></span><br><span class="line">        cs.Write(inputByteArray, <span class="number">0</span>, inputByteArray.Length);</span><br><span class="line"></span><br><span class="line">        cs.FlushFinalBlock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(ms.ToArray());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.机器码为明文，采用DES加密&lt;br&gt;2.判断输入激活码与机器码的密文一致，激活成功&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
    
      <category term="unity 加密" scheme="http://shuaiqzh.com/tags/unity-%E5%8A%A0%E5%AF%86/"/>
    
      <category term="注册码功能" scheme="http://shuaiqzh.com/tags/%E6%B3%A8%E5%86%8C%E7%A0%81%E5%8A%9F%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>VuforiaAR 物体的坐标随摄像机晃动而变化</title>
    <link href="http://shuaiqzh.com/VuforiaAR-%E7%89%A9%E4%BD%93%E7%9A%84%E5%9D%90%E6%A0%87%E9%9A%8F%E6%91%84%E5%83%8F%E6%9C%BA%E6%99%83%E5%8A%A8%E8%80%8C%E5%8F%98%E5%8C%96/"/>
    <id>http://shuaiqzh.com/VuforiaAR-%E7%89%A9%E4%BD%93%E7%9A%84%E5%9D%90%E6%A0%87%E9%9A%8F%E6%91%84%E5%83%8F%E6%9C%BA%E6%99%83%E5%8A%A8%E8%80%8C%E5%8F%98%E5%8C%96/</id>
    <published>2020-01-16T10:27:55.000Z</published>
    <updated>2020-01-16T10:38:04.643Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个ar小游戏 塔防类的 刚开始就出现了问题 生成敌人的时候 明明再编辑器里 敌人是顺着导航网格前进的 但是在手机上随着手机的晃动 小兵的位移出现了偏差 而且我的imageTarget没有放在ARCamera里 最后找到了解决方法 更改一下AR相机的WorldCenter就好了 之前默认是Device改成imageTarget就好<img src="https://img-blog.csdnimg.cn/20191113134734512.png" alt="在这里插入图片描述"> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做了一个ar小游戏 塔防类的 刚开始就出现了问题 生成敌人的时候 明明再编辑器里 敌人是顺着导航网格前进的 但是在手机上随着手机的晃动 小兵的位移出现了偏差 而且我的imageTarget没有放在ARCamera里 最后找到了解决方法 更改一下AR相机的WorldCen
      
    
    </summary>
    
    
    
      <category term="VuforiaAR" scheme="http://shuaiqzh.com/tags/VuforiaAR/"/>
    
  </entry>
  
  <entry>
    <title>Unity 人物行走的另一种写法</title>
    <link href="http://shuaiqzh.com/Unity-%E4%BA%BA%E7%89%A9%E8%A1%8C%E8%B5%B0%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95/"/>
    <id>http://shuaiqzh.com/Unity-%E4%BA%BA%E7%89%A9%E8%A1%8C%E8%B5%B0%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95/</id>
    <published>2020-01-16T10:27:32.000Z</published>
    <updated>2020-01-16T10:36:54.191Z</updated>
    
    <content type="html"><![CDATA[<p> 最近跟着UnityLearn做一个小游戏，发现官方另一种人物走法比我以往写的要更加顺滑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Player : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Vector3 p_Movement;</span><br><span class="line">    Quaternion p_Rotation = Quaternion.identity;</span><br><span class="line">    Animator p_Animator;</span><br><span class="line">    Rigidbody p_Rigidbody;</span><br><span class="line">    AudioSource p_FootAudio;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 旋转速度</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public float rotaSpeed=20f;</span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        p_FootAudio = transform.GetComponent&lt;AudioSource&gt;();</span><br><span class="line">        p_Rigidbody = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        p_Animator = GetComponent&lt;Animator&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void FixedUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        float horizontal = Input.GetAxis(&quot;Horizontal&quot;);//获取横向，最大为1</span><br><span class="line">        float vertical = Input.GetAxis(&quot;Vertical&quot;);//获取纵向，最大为1</span><br><span class="line"></span><br><span class="line">        p_Movement.Set(horizontal,0,vertical);//把横纵向值赋给一个vector3变量</span><br><span class="line">        //这个变量就是一个模向量</span><br><span class="line">        p_Movement.Normalize();//同时向两边前进（斜着前进），那么斜边就大于1（速度会大于直走），把该向量归一化</span><br><span class="line"></span><br><span class="line">        //判断动画是否播放</span><br><span class="line">        bool hasHInput = !Mathf.Approximately(horizontal,0);</span><br><span class="line">        bool hasVInput = !Mathf.Approximately(vertical,0);</span><br><span class="line">        bool iswalking = hasHInput || hasVInput;</span><br><span class="line"></span><br><span class="line">        p_Animator.SetBool(&quot;isWalking&quot;,iswalking);</span><br><span class="line">        if (iswalking)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!p_FootAudio.isPlaying)</span><br><span class="line">                p_FootAudio.Play();</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            p_FootAudio.Stop();</span><br><span class="line">        &#125;</span><br><span class="line">        //设置角色旋转</span><br><span class="line">        Vector3 Rota = Vector3.RotateTowards(transform.forward,p_Movement,rotaSpeed*Time.deltaTime,0);</span><br><span class="line">        p_Rotation = Quaternion.LookRotation(Rota);//看向得到的旋转度，产生相应的旋转</span><br><span class="line">    &#125;</span><br><span class="line">    private void OnAnimatorMove()</span><br><span class="line">    &#123;</span><br><span class="line">        //deltaPosition获取动画因为根运动而导致的坐标变化，然后用magnitude获取其中的长度(相当于用了animator自身的位移，用了自己获取的方向)</span><br><span class="line">        p_Rigidbody.MovePosition(p_Rigidbody.position+p_Movement*p_Animator.deltaPosition.magnitude);</span><br><span class="line">        p_Rigidbody.MoveRotation(p_Rotation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 最近跟着UnityLearn做一个小游戏，发现官方另一种人物走法比我以往写的要更加顺滑&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
  </entry>
  
  <entry>
    <title>事件管理（基于接口的事件管理）</title>
    <link href="http://shuaiqzh.com/%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/"/>
    <id>http://shuaiqzh.com/%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%88%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%EF%BC%89/</id>
    <published>2020-01-16T10:27:20.000Z</published>
    <updated>2020-01-16T10:39:47.717Z</updated>
    
    <content type="html"><![CDATA[<p>注释写的比较全，就不多做解释了</p><h3 id="定义LIstener接口，写一个事件"><a href="#定义LIstener接口，写一个事件" class="headerlink" title="定义LIstener接口，写一个事件"></a>定义LIstener接口，写一个事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public enum Event_Type &#123;</span><br><span class="line">    Game_End,//游戏结束</span><br><span class="line">    Player_Dead,//血量清零</span><br><span class="line">    HP_Change//血量值变化</span><br><span class="line">&#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 监听器接口对象</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public interface IListener  &#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 接口方法，产生某一事件时，会被管理器调用所有继承自该接口的对象的方法</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;Event_Type&quot;&gt;事件类型&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;transform&quot;&gt;监听器对象&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;Param&quot;&gt;额外参数&lt;/param&gt;</span><br><span class="line">    void OnEvent(Event_Type event_Type,Transform transform,Object Param=null);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承IListener-创建监听器"><a href="#继承IListener-创建监听器" class="headerlink" title="继承IListener,创建监听器"></a>继承IListener,创建监听器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class CustomListener : MonoBehaviour,IListener &#123;</span><br><span class="line"></span><br><span class="line">    public void OnEvent(Event_Type event_Type, Transform transform, Object Param = null)</span><br><span class="line">    &#123;</span><br><span class="line">        //继承接口，转化为监听器</span><br><span class="line"></span><br><span class="line">        switch (event_Type)</span><br><span class="line">        &#123;</span><br><span class="line">            case Event_Type.Game_End:</span><br><span class="line">                break;</span><br><span class="line">            case Event_Type.Player_Dead:</span><br><span class="line">                break;</span><br><span class="line">            case Event_Type.HP_Change:</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义监听器管理类，注册并给每个监听器发送事件"><a href="#定义监听器管理类，注册并给每个监听器发送事件" class="headerlink" title="定义监听器管理类，注册并给每个监听器发送事件"></a>定义监听器管理类，注册并给每个监听器发送事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 监听器管理类，负责调用监听器上的事件（该类需要作为持久性单例对象）</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class EventManger : MonoBehaviour &#123;</span><br><span class="line">    private static EventManger instance = null;</span><br><span class="line"></span><br><span class="line">    //一个事件能对应多个对象，所以用list存储起来</span><br><span class="line">    private Dictionary&lt;Event_Type, List&lt;IListener&gt;&gt; ListenerDic = new Dictionary&lt;Event_Type, List&lt;IListener&gt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static EventManger Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    private void Awake()</span><br><span class="line">    &#123;</span><br><span class="line">        //保持唯一性</span><br><span class="line">        if (instance == null)</span><br><span class="line">        &#123;</span><br><span class="line">            instance = this;</span><br><span class="line">            DontDestroyOnLoad(this);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            DestroyImmediate(this);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 通过监听器对象调用，存储监听器事件和对象的链接</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;event_Type&quot;&gt;监听器事件&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;listener&quot;&gt;监听器对象&lt;/param&gt;</span><br><span class="line">    public void AddListener(Event_Type event_Type,IListener listener) &#123;</span><br><span class="line">        List&lt;IListener&gt; listeners = null;</span><br><span class="line"></span><br><span class="line">        //判断字典中是否有这个key值(给的监听器事件)，如果有把value（相应的监听器对象）给这个listeners对象</span><br><span class="line">        if (ListenerDic.TryGetValue(event_Type, out listeners))</span><br><span class="line">        &#123;</span><br><span class="line">            listeners.Add(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            //没有这个key，就放在新的键值对里</span><br><span class="line">            listeners = new List&lt;IListener&gt;();</span><br><span class="line">            listeners.Add(listener);</span><br><span class="line">            ListenerDic.Add(event_Type, listeners);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 无论是否时监听器对象，都可以调用这个方法，用来通知全部跟当前事件对应的对象</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;event_Type&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;transform&quot;&gt;&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;param&quot;&gt;&lt;/param&gt;</span><br><span class="line">    public void SendData(Event_Type event_Type,Transform transform,Object param=null) &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;IListener&gt; list = null;</span><br><span class="line">        //查找是否有这个对象</span><br><span class="line">        if (!ListenerDic.TryGetValue(event_Type, out list))</span><br><span class="line">            return;</span><br><span class="line">        //通知全部事件对象</span><br><span class="line">        for (int i = 0; i &lt; list.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!list[i].Equals(null)) &#123;</span><br><span class="line">                list[i].OnEvent(event_Type,transform,param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注释写的比较全，就不多做解释了&lt;/p&gt;
&lt;h3 id=&quot;定义LIstener接口，写一个事件&quot;&gt;&lt;a href=&quot;#定义LIstener接口，写一个事件&quot; class=&quot;headerlink&quot; title=&quot;定义LIstener接口，写一个事件&quot;&gt;&lt;/a&gt;定义LIstene
      
    
    </summary>
    
    
    
      <category term="事件管理" scheme="http://shuaiqzh.com/tags/%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Unity操控Arduino板接舵机旋转</title>
    <link href="http://shuaiqzh.com/Unity%E6%93%8D%E6%8E%A7Arduino%E6%9D%BF%E6%8E%A5%E8%88%B5%E6%9C%BA%E6%97%8B%E8%BD%AC/"/>
    <id>http://shuaiqzh.com/Unity%E6%93%8D%E6%8E%A7Arduino%E6%9D%BF%E6%8E%A5%E8%88%B5%E6%9C%BA%E6%97%8B%E8%BD%AC/</id>
    <published>2020-01-16T10:27:07.000Z</published>
    <updated>2020-01-16T10:33:29.702Z</updated>
    
    <content type="html"><![CDATA[<p>跟上篇文章差不多 也是串口通讯 只是这次在arduino端加了一个舵机，pc端向arduino传输一个角度 </p><h2 id="pc端代码（打开端口以及new一个接收数据的线程）ps-接收数据可以不要-因为我们这里不用接收返回数据"><a href="#pc端代码（打开端口以及new一个接收数据的线程）ps-接收数据可以不要-因为我们这里不用接收返回数据" class="headerlink" title="pc端代码（打开端口以及new一个接收数据的线程）ps:接收数据可以不要 因为我们这里不用接收返回数据"></a>pc端代码（打开端口以及new一个接收数据的线程）ps:接收数据可以不要 因为我们这里不用接收返回数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//设置串口，波特率</span><br><span class="line">        sp = new SerialPort(&quot;COM4&quot;, 9600);</span><br><span class="line">        sp.Encoding = Encoding.ASCII;</span><br><span class="line">        sp.ReadTimeout = 2000;</span><br><span class="line">        sp.WriteTimeout = 2000;</span><br><span class="line">        //sp.Encoding = ASCIIEncoding.ASCII;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            if (!sp.IsOpen)</span><br><span class="line">            &#123;</span><br><span class="line">                sp.Open();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception err)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            Debug.Log(err);</span><br><span class="line">        &#125;</span><br><span class="line">        print(&quot;端口打开&quot;);</span><br><span class="line">        wenben.text=&quot;端口打开&quot;;</span><br><span class="line">        //tPort = new Thread(DealData);</span><br><span class="line">        //tPort.Start();</span><br><span class="line">        tPortDeal = new Thread(ReceiveData);</span><br><span class="line">        tPortDeal.IsBackground = true;</span><br></pre></td></tr></table></figure><h2 id="pc端（发送数据）"><a href="#pc端（发送数据）" class="headerlink" title="pc端（发送数据）"></a>pc端（发送数据）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">   /// 向陀机发送旋转数据</span><br><span class="line">   /// &lt;/summary&gt;</span><br><span class="line">   void SendRotaData() &#123;</span><br><span class="line">       if (sp.IsOpen) &#123;</span><br><span class="line">           Thread.Sleep(200);</span><br><span class="line">           </span><br><span class="line">           string data=&quot;&quot;;</span><br><span class="line">           //RotaY是我在unity里建的cube的旋转值Y轴（我的舵机最大只能转180度）</span><br><span class="line">           if (RotaY &gt; 0 &amp;&amp; RotaY &lt; 180)</span><br><span class="line">                data= RotaY.ToString();</span><br><span class="line">           print(data);</span><br><span class="line">           byte[] buffer = ascii2.GetBytes(data);</span><br><span class="line">           //角度转字符串，然后发送</span><br><span class="line">           sp.WriteLine(data);</span><br><span class="line">           // sp.Write(buffer, 0, buffer.Length);</span><br><span class="line">           print(&quot;发送数据：&quot;+data);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="然后是Arduino端代码吗，这里用到了舵机的Servo库"><a href="#然后是Arduino端代码吗，这里用到了舵机的Servo库" class="headerlink" title="然后是Arduino端代码吗，这里用到了舵机的Servo库"></a>然后是Arduino端代码吗，这里用到了舵机的Servo库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Servo.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String serialString=&quot;&quot;;</span><br><span class="line">//boolean readCompleted=false;</span><br><span class="line">//char buf[4];</span><br><span class="line">Servo myservo;// 创建一个舵机对象</span><br><span class="line">int pos=0;</span><br><span class="line">void setup() &#123;</span><br><span class="line">  </span><br><span class="line">  // put your setup code here, to run once:</span><br><span class="line">  Serial.begin(9600);</span><br><span class="line">  myservo.attach(9);// 将引脚9上的舵机与声明的舵机对象连接起来</span><br><span class="line">  while(Serial.read()&gt;=0)&#123;&#125;</span><br><span class="line">serialString.reserve(200);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void serialEvent()//当串口有数据时，调用此函数</span><br><span class="line">&#123;</span><br><span class="line">  serialString=&quot;&quot;;</span><br><span class="line">  while(Serial.available())//检测数据，如果没有数据返回</span><br><span class="line">  &#123;</span><br><span class="line">    char inChar = (char)Serial.read();</span><br><span class="line">    //Serial.println(inChar);</span><br><span class="line">    serialString += inChar;</span><br><span class="line">    delay(100);</span><br><span class="line">  &#125; </span><br><span class="line">  Serial.println(serialString);</span><br><span class="line">  pos=serialString.toInt();</span><br><span class="line">  myservo.write(pos);</span><br><span class="line">  delay(20);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我通过移动unity里的cube角度，就可以实时改变舵机的角度<br>这里推荐一篇博客，里边有各种Serial函数的介绍和示例，比较详细，大家可以去看看<br><a href="https://blog.csdn.net/hhaowang/article/details/88529842" target="_blank" rel="noopener">串口Serial函数介绍</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;跟上篇文章差不多 也是串口通讯 只是这次在arduino端加了一个舵机，pc端向arduino传输一个角度 &lt;/p&gt;
&lt;h2 id=&quot;pc端代码（打开端口以及new一个接收数据的线程）ps-接收数据可以不要-因为我们这里不用接收返回数据&quot;&gt;&lt;a href=&quot;#pc端代码（打
      
    
    </summary>
    
    
    
      <category term="Arduino" scheme="http://shuaiqzh.com/tags/Arduino/"/>
    
      <category term="串口通讯" scheme="http://shuaiqzh.com/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>Unity和Arduino串口通讯</title>
    <link href="http://shuaiqzh.com/Unity%E5%92%8CArduino%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    <id>http://shuaiqzh.com/Unity%E5%92%8CArduino%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/</id>
    <published>2020-01-16T10:26:51.000Z</published>
    <updated>2020-01-16T10:34:12.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-部分的发送与接收方法"><a href="#C-部分的发送与接收方法" class="headerlink" title="C#部分的发送与接收方法"></a>C#部分的发送与接收方法</h2><p>这里是发送数据的代码，有一个中文编码的问题还没解决，不管用什么编码都不都进行中文传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void SendSerialPortData()</span><br><span class="line">    //发送数据</span><br><span class="line">    &#123;</span><br><span class="line">        if (sp.IsOpen)</span><br><span class="line">        &#123;</span><br><span class="line">            print(&quot;Send&quot;);</span><br><span class="line">            Encoding ascii = new ASCIIEncoding();</span><br><span class="line">            Encoding utf8 = new UTF8Encoding();</span><br><span class="line">            //实际串口代码是   FE 05 00 00 FF 00 98 35</span><br><span class="line">            //byte[] buffer = &#123; 0xFE, 0x05, 0x00, 0x00, 0xFF, 0x00, 0x98, 0x35 &#125;;</span><br><span class="line">            string input = text.text;</span><br><span class="line">            byte[] buffer=ascii.GetBytes(input);</span><br><span class="line"></span><br><span class="line">            //foreach (var item in buffer)</span><br><span class="line">            //&#123;</span><br><span class="line">            //    print(item);</span><br><span class="line">            //&#125;</span><br><span class="line">            //sp.Write(input);</span><br><span class="line">            sp.Write(buffer, 0, buffer.Length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里是C# 端接收数据的代码，这个方法，我是直接开了一个后台线程，一直在执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void ReceiveData()</span><br><span class="line">    //接收数据</span><br><span class="line">    &#123;</span><br><span class="line">        Thread.Sleep(1);</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            //Byte[] buf = null;</span><br><span class="line">            //int n = sp.BytesToRead;</span><br><span class="line">            //读取串口缓存数据，直到下一行</span><br><span class="line">            a = sp.ReadLine();</span><br><span class="line">            //丢弃来自串行驱动程序的接收缓冲区的数据。</span><br><span class="line">            sp.DiscardInBuffer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            //Debug.Log(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="arduino端数据处理"><a href="#arduino端数据处理" class="headerlink" title="arduino端数据处理"></a>arduino端数据处理</h2><p>主要就是这个方法，serialEvent函数调用实在两次loop之间，检测串口数据<br>available返回数据的字节数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void serialEvent()//:http://arduino.cc/en/Tutorial/SerialEvent</span><br><span class="line">&#123;</span><br><span class="line">  serialString=&quot;&quot;;</span><br><span class="line">  while(Serial.available())//检测数据，如果没有数据返回0://arduino.cc/en/Serial/Available</span><br><span class="line">  &#123;</span><br><span class="line">    char inChar = (char)Serial.read();</span><br><span class="line">    //Serial.println(inChar);</span><br><span class="line">    serialString += inChar;</span><br><span class="line">    delay(100);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Serial.println(serialString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-部分的发送与接收方法&quot;&gt;&lt;a href=&quot;#C-部分的发送与接收方法&quot; class=&quot;headerlink&quot; title=&quot;C#部分的发送与接收方法&quot;&gt;&lt;/a&gt;C#部分的发送与接收方法&lt;/h2&gt;&lt;p&gt;这里是发送数据的代码，有一个中文编码的问题还没解决，不管用什
      
    
    </summary>
    
    
    
      <category term="Arduino" scheme="http://shuaiqzh.com/tags/Arduino/"/>
    
      <category term="串口通讯" scheme="http://shuaiqzh.com/tags/%E4%B8%B2%E5%8F%A3%E9%80%9A%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>unity 渲染流水线</title>
    <link href="http://shuaiqzh.com/unity-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    <id>http://shuaiqzh.com/unity-%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/</id>
    <published>2020-01-16T10:26:38.000Z</published>
    <updated>2020-01-16T10:34:46.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近买了一本有关shader的书，总结了以下渲染管线的基本流程"><a href="#最近买了一本有关shader的书，总结了以下渲染管线的基本流程" class="headerlink" title="最近买了一本有关shader的书，总结了以下渲染管线的基本流程"></a>最近买了一本有关shader的书，总结了以下渲染管线的基本流程<img src="https://img-blog.csdnimg.cn/20191008105441238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;最近买了一本有关shader的书，总结了以下渲染管线的基本流程&quot;&gt;&lt;a href=&quot;#最近买了一本有关shader的书，总结了以下渲染管线的基本流程&quot; class=&quot;headerlink&quot; title=&quot;最近买了一本有关shader的书，总结了以下渲染管线的基本流
      
    
    </summary>
    
    
    
      <category term="unity渲染流水线" scheme="http://shuaiqzh.com/tags/unity%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>unity中的Destroy和DestroyImmediate</title>
    <link href="http://shuaiqzh.com/unity%E4%B8%AD%E7%9A%84Destroy%E5%92%8CDestroyImmediate/"/>
    <id>http://shuaiqzh.com/unity%E4%B8%AD%E7%9A%84Destroy%E5%92%8CDestroyImmediate/</id>
    <published>2020-01-16T10:26:23.000Z</published>
    <updated>2020-01-16T10:35:33.151Z</updated>
    
    <content type="html"><![CDATA[<p>   今天要写一个问题考核的小东西，本来很快就写完了，但是有一点卡壳了，在刷新答案的时候要把当前答案框里的答案全部销毁，然后创建新的答案（答案都是按钮，且数量不定），我通过debug发现每次销毁后，框内虽然没有上道题的答案了，但是输出答案的父节点的childcount都显示大于0，后来查阅了资料才发现，Destroy这个方法，不会立即删除对象，而是会在下一帧才上销毁，在同一帧的时候他会先把对象存储在内存中，防止如果在同一帧在destroy后还调用了要销毁的对象，而DestroyImmediate会在同一帧立即删除当前对象</p><p> 但是还有一个问题，如果用<strong>DestroyImmediate</strong>，那此对象在父节点中会立即删除，那么在其后的对象的下标都会向前移一位，所以如果这个方法遍历删除某一对象下的子节点时就要用下面的这个方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int num = resultP.childCount;</span><br><span class="line">        for (int i = 0; i &lt; num; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            DestroyImmediate(resultP.GetChild(0).gameObject,true);//在当前帧立即销毁该资源</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="http://www.manew.com/youxizz/2062.html" target="_blank" rel="noopener">蛮牛u3d手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   今天要写一个问题考核的小东西，本来很快就写完了，但是有一点卡壳了，在刷新答案的时候要把当前答案框里的答案全部销毁，然后创建新的答案（答案都是按钮，且数量不定），我通过debug发现每次销毁后，框内虽然没有上道题的答案了，但是输出答案的父节点的childcount都显示
      
    
    </summary>
    
    
    
      <category term="Destroy和DestroyImmediate" scheme="http://shuaiqzh.com/tags/Destroy%E5%92%8CDestroyImmediate/"/>
    
  </entry>
  
  <entry>
    <title>初学Linux心得（四）</title>
    <link href="http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2020-01-16T10:25:34.000Z</published>
    <updated>2020-01-16T10:30:28.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="链接命令（文件）"><a href="#链接命令（文件）" class="headerlink" title="链接命令（文件）"></a>链接命令（文件）</h1><h2 id="ln-【选项参数】-【源文件】-【目标文件（链接）】"><a href="#ln-【选项参数】-【源文件】-【目标文件（链接）】" class="headerlink" title="ln 【选项参数】 【源文件】 【目标文件（链接）】"></a>ln 【选项参数】 【源文件】 【目标文件（链接）】</h2><p>链接命令顾名思义，就是为一个文件生成一个链接，而链接又分为<strong>软连接和硬链接</strong>，加上“-s”选项就是软连接，不加就是硬链接</p><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><p>软链接就相当于windows系统的快捷方式，只是引入一个指向源文件的链接，因此大小通常只有几个字节，如果你把源文件删了，那软连接也就没什么用了<br>下图我先对qzh文件生成了一个qzh.soft的软连接，然后用ls命令查看软连接，会发现有个指向箭头，指向源文件qzh<br>还有一个特点是软连接默认开启全部权限，即rwx（读，写，执行），每一个用户都是。<br><img src="https://img-blog.csdnimg.cn/20190910105037704.png" alt="在这里插入图片描述"></p><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><p>硬链接和软连接有很大的不同，首先他几乎是源文件的copy，连i节点都一样，更不用说内容了，正因为i节点一样，所以硬链接和源文件可以保持同步更新，硬链接可以看作是源文件的备份，所以如果源文件删除了，硬链接还可以照常操作，不会有影响<br>硬链接的特点：<br>1，和源文件保持同步更新<br>2，通过i节点区分<br>3，不能跨分区（软连接可以）<br>4，不能针对目录使用（软连接可以）</p><h3 id="不能针对目录，不能跨分区"><a href="#不能针对目录，不能跨分区" class="headerlink" title="不能针对目录，不能跨分区"></a>不能针对目录，不能跨分区</h3><p><img src="https://img-blog.csdnimg.cn/20190910110447769.jpg" alt="不能针对目录，不能跨分区"></p><h3 id="源文件和硬链接i节点相同"><a href="#源文件和硬链接i节点相同" class="headerlink" title="源文件和硬链接i节点相同"></a>源文件和硬链接i节点相同</h3><p><img src="https://img-blog.csdnimg.cn/20190910110627258.jpg" alt="源文件和硬链接i节点相同"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;链接命令（文件）&quot;&gt;&lt;a href=&quot;#链接命令（文件）&quot; class=&quot;headerlink&quot; title=&quot;链接命令（文件）&quot;&gt;&lt;/a&gt;链接命令（文件）&lt;/h1&gt;&lt;h2 id=&quot;ln-【选项参数】-【源文件】-【目标文件（链接）】&quot;&gt;&lt;a href=&quot;#ln-
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://shuaiqzh.com/tags/Linux/"/>
    
      <category term="Linux命令" scheme="http://shuaiqzh.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>unity UGUI-toggle监听</title>
    <link href="http://shuaiqzh.com/unity-UGUI-toggle%E7%9B%91%E5%90%AC/"/>
    <id>http://shuaiqzh.com/unity-UGUI-toggle%E7%9B%91%E5%90%AC/</id>
    <published>2019-09-07T08:21:55.000Z</published>
    <updated>2019-09-07T08:22:51.353Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为下面代码是监听toggle点击的。。。其实不是，他是用来监听 ison 的改变的，真的好坑。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Toggle.onValueChanged.AddListener((bool value) =&gt; resultToggleChange(Toggle, value));</span><br><span class="line">void resultToggleChange(Toggle toggle, bool value)&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以为下面代码是监听toggle点击的。。。其实不是，他是用来监听 ison 的改变的，真的好坑。。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
      <category term="UGUI" scheme="http://shuaiqzh.com/tags/UGUI/"/>
    
      <category term="Toggle监听" scheme="http://shuaiqzh.com/tags/Toggle%E7%9B%91%E5%90%AC/"/>
    
  </entry>
  
  <entry>
    <title>初学Linux心得（三）</title>
    <link href="http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2019-09-07T08:14:24.000Z</published>
    <updated>2019-09-07T08:18:20.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>一般的命令格式为<br>命令 【-选项】【参数】<br><strong>选项</strong>可以省略，他是用来“强化”一些命令的（我的理解）<br><strong>参数</strong>就是来指定操作对象的<br><strong>举个栗子：</strong><br>    命令：ls<br>    这个是用来查看目标目录下的文件的<br>    但是Linux中有一点跟windows一样，都是有隐藏文件的，这时候ls命令就查看不到隐藏文件，怎么办呢？用<strong>选项</strong>！！！<br>    比如“-a”，“-a”选项就是all的意思，用来查看全部文件，不管你隐藏与否，都会被查找，显示出来<br>    还有“-l”，“-l”选项可以让ls在查看文件同时，显示每个文件的相关属性，比如文件类型（linux中大多数文件没有后缀名），最后修改时间，还有显示分组（user，group,other）。<br>    如果你想使用多个选项，就可以用简写选项的方式，比如上面的两个选项，就可以用“-al”来表示</p><h3 id="其他还有很多命令和选项，以后会一一提到"><a href="#其他还有很多命令和选项，以后会一一提到" class="headerlink" title="其他还有很多命令和选项，以后会一一提到"></a>其他还有很多命令和选项，以后会一一提到</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令&quot;&gt;&lt;a href=&quot;#命令&quot; class=&quot;headerlink&quot; title=&quot;命令&quot;&gt;&lt;/a&gt;命令&lt;/h1&gt;&lt;p&gt;一般的命令格式为&lt;br&gt;命令 【-选项】【参数】&lt;br&gt;&lt;strong&gt;选项&lt;/strong&gt;可以省略，他是用来“强化”一些命令的（我的理解
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://shuaiqzh.com/tags/Linux/"/>
    
      <category term="Linux命令" scheme="http://shuaiqzh.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>初学Linux心得（二）</title>
    <link href="http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2019-09-07T08:14:18.000Z</published>
    <updated>2019-09-07T08:18:20.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><h1 id="bin"><a href="#bin" class="headerlink" title="/bin/"></a>/bin/</h1><p>存放系统命令的目录（普通账号和管理员都可以访问）</p><h1 id="boot"><a href="#boot" class="headerlink" title="/boot/"></a>/boot/</h1><p>系统启动目录</p><h1 id="dev"><a href="#dev" class="headerlink" title="/dev/"></a>/dev/</h1><p>设备文件保存位置</p><h1 id="etc"><a href="#etc" class="headerlink" title="/etc/"></a>/etc/</h1><p>配置文件（强烈建议备份）</p><h1 id="home"><a href="#home" class="headerlink" title="/home/"></a>/home/</h1><p>普通用户，默认登陆位置，比如一个普通账号为abc，那他的起始位置就是/home/qzh/<br>而管理员的起始位置为/root/</p><h1 id="lost-found"><a href="#lost-found" class="headerlink" title="/lost+found/"></a>/lost+found/</h1><p>每个分区目录中都会出现（用来备份和恢复目录）</p><h1 id="usr"><a href="#usr" class="headerlink" title="/usr/"></a>/usr/</h1><p>系统的软件资源目录，类似与windows系统的windows目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;目录介绍&quot;&gt;&lt;a href=&quot;#目录介绍&quot; class=&quot;headerlink&quot; title=&quot;目录介绍&quot;&gt;&lt;/a&gt;目录介绍&lt;/h3&gt;&lt;h1 id=&quot;bin&quot;&gt;&lt;a href=&quot;#bin&quot; class=&quot;headerlink&quot; title=&quot;/bin/&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://shuaiqzh.com/tags/Linux/"/>
    
      <category term="Linux目录" scheme="http://shuaiqzh.com/tags/Linux%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>初学Linux心得（一）</title>
    <link href="http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://shuaiqzh.com/%E5%88%9D%E5%AD%A6Linux%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-09-07T08:13:58.000Z</published>
    <updated>2019-09-07T08:18:20.749Z</updated>
    
    <content type="html"><![CDATA[<p>Linux的安装就不讲了，网上示例很多，这里推荐在虚拟机里安装，这里说一下linux能够运行的4要素</p><h2 id="1，分区"><a href="#1，分区" class="headerlink" title="1，分区"></a>1，分区</h2><p>首先是“/”，“/”是根分区<br>“swap”分区，swap分区属于交换分区，属于虚拟内存，建议最大不要超过2g<br>“/boot”分区，启动分区，这里最好不要存放任何东西，否则会影响你linux启动<br>“/home”分区，用户文件存放，一般是普通用户登陆后所在初始位置</p><h2 id="2，格式化"><a href="#2，格式化" class="headerlink" title="2，格式化"></a>2，格式化</h2><p>很多同学都把格式化当作清空硬盘来使用 ，其实不是的，它的作用是要写入相应的文件系统，linux的文件系统有ext2,ext3,ext4等</p><h2 id="3，每个分区要有一个设备文件名"><a href="#3，每个分区要有一个设备文件名" class="headerlink" title="3，每个分区要有一个设备文件名"></a>3，每个分区要有一个设备文件名</h2><h2 id="4，写入挂载点（相当于windows的写入盘符）"><a href="#4，写入挂载点（相当于windows的写入盘符）" class="headerlink" title="4，写入挂载点（相当于windows的写入盘符）"></a>4，写入挂载点（相当于windows的写入盘符）</h2><p>有一点，挂载的目录一定要是空目录<br><strong><em>Linux的文件系统和windows有很大不同的一点是<br> window的文件下面的子目录一定是和父父目录在一个硬盘空间内，而Linux子目录和父目录可以都有一个单独的硬盘空间</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux的安装就不讲了，网上示例很多，这里推荐在虚拟机里安装，这里说一下linux能够运行的4要素&lt;/p&gt;
&lt;h2 id=&quot;1，分区&quot;&gt;&lt;a href=&quot;#1，分区&quot; class=&quot;headerlink&quot; title=&quot;1，分区&quot;&gt;&lt;/a&gt;1，分区&lt;/h2&gt;&lt;p&gt;首先是“
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="http://shuaiqzh.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>做webgl遇到的两个坑</title>
    <link href="http://shuaiqzh.com/%E5%81%9Awebgl%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9D%91/"/>
    <id>http://shuaiqzh.com/%E5%81%9Awebgl%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9D%91/</id>
    <published>2019-08-21T12:07:37.000Z</published>
    <updated>2019-08-25T09:24:42.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XML文件远程读取"><a href="#XML文件远程读取" class="headerlink" title="XML文件远程读取"></a>XML文件远程读取</h2><p>我的xml文件存放在远程服务器端，我想直接远程下载访问，但这遇到了问题<br>首先，xml读取有两种方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XmlDocument xml = new XmlDocument();</span><br><span class="line">xml.LoadXml(string);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XmlDocument xml = new XmlDocument();</span><br><span class="line">xml.Load(path);</span><br></pre></td></tr></table></figure><p>loadxml是读取一个string字符串，从而写到xmldocument里，而load则是一个文件路径，要有后缀名<br>刚开始我是用load（远程链接）发现获取不到<br>然后我先用www下载，用<a href="http://www.text转成string字符传，接着用LoadXml读取" target="_blank" rel="noopener">www.text转成string字符传，接着用LoadXml读取</a><br>发现还是读取不到，再网上搜了半天，发现这个类StringReader，它把www读取的文本转化为另一种string字符串<br>虽然我debug出来两种字符串都一样，但是这个偏偏就能用，也希望有大佬给我解释一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">IEnumerator DownXml()</span><br><span class="line">    &#123;</span><br><span class="line">        WWW xmlwww = new WWW(&quot;url&quot;);</span><br><span class="line">        yield return xmlwww;</span><br><span class="line">        if (xmlwww.isDone)</span><br><span class="line">        &#123;</span><br><span class="line">            System.IO.StringReader stringReader = new System.IO.StringReader(xmlwww.text);</span><br><span class="line">            stringReader.Read();</span><br><span class="line">            string result = stringReader.ReadToEnd();</span><br><span class="line">            stringReader.Close();</span><br><span class="line">            //print(xmlwww.text);</span><br><span class="line">            ReadXml(result);</span><br><span class="line">        &#125;</span><br><span class="line">        xmlwww.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">    void ReadXml(string path)</span><br><span class="line">    &#123;</span><br><span class="line">        XmlDocument xml = new XmlDocument();</span><br><span class="line">        xml.LoadXml(path);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="webgl远程加载ab包"><a href="#webgl远程加载ab包" class="headerlink" title="webgl远程加载ab包"></a>webgl远程加载ab包</h2><p>这个问题是我把ab包放在服务器上 编辑器上正常下载和解压 但是到了浏览器上到解压的步骤时会报一条错误</p><h2 id="Decompressing-this-format-1-is-not-supported-on-this-platform"><a href="#Decompressing-this-format-1-is-not-supported-on-this-platform" class="headerlink" title="Decompressing this format (1) is not supported on this platform"></a>Decompressing this format (1) is not supported on this platform</h2><p>错误的大概意思就是平台不支持该格式解压<br>我到unity官方文档上查了一下 <a href="https://docs.unity3d.com/2017.4/Documentation/Manual/webgl-debugging.html" target="_blank" rel="noopener">u3d文档</a><br>原来我使用的是默认的压缩格式LZMA  而webgl应该用LZ4的压缩格式。。。。所以你只要在打包的代码中这样写就可以了，还有就是目标平台也要写成WebGL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BuildPipeline.BuildAssetBundles(assetBundleDirectory, BuildAssetBundleOptions.ChunkBasedCompression, BuildTarget.WebGL);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;XML文件远程读取&quot;&gt;&lt;a href=&quot;#XML文件远程读取&quot; class=&quot;headerlink&quot; title=&quot;XML文件远程读取&quot;&gt;&lt;/a&gt;XML文件远程读取&lt;/h2&gt;&lt;p&gt;我的xml文件存放在远程服务器端，我想直接远程下载访问，但这遇到了问题&lt;br&gt;首先，
      
    
    </summary>
    
    
    
      <category term="webgl" scheme="http://shuaiqzh.com/tags/webgl/"/>
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
      <category term="AssetBundle" scheme="http://shuaiqzh.com/tags/AssetBundle/"/>
    
      <category term="服务器" scheme="http://shuaiqzh.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Xml" scheme="http://shuaiqzh.com/tags/Xml/"/>
    
  </entry>
  
  <entry>
    <title>www下载ab包</title>
    <link href="http://shuaiqzh.com/www%E4%B8%8B%E8%BD%BDab%E5%8C%85/"/>
    <id>http://shuaiqzh.com/www%E4%B8%8B%E8%BD%BDab%E5%8C%85/</id>
    <published>2019-08-21T12:07:10.000Z</published>
    <updated>2019-08-25T09:24:32.943Z</updated>
    
    <content type="html"><![CDATA[<h3 id="www下载远程ab包"><a href="#www下载远程ab包" class="headerlink" title="www下载远程ab包"></a>www下载远程ab包</h3><p>  最近一直在忙WebGL的项目，简直蛋疼，尤其是内存方面，什么都得节省，不敢让模型做太高精度的贴图，ui也是，但是这个项目模型量有点多，导致加载时间简直长到不能忍受，于是还是把资源打成ab包，上传服务器，在网站打开后再进行下载使用</p><h2 id="打ab包"><a href="#打ab包" class="headerlink" title="打ab包"></a>打ab包</h2><p>unity打ab包很简单 把想要打包的资源，在assetlabel框里定好assetbundle名字就行，然后把以下代码放进Editor文件夹内，之后在Assets/Build AssetBundles菜单栏中点击build就可以新生成一个assetbundles文件夹，里面就是生成的ab包<br><img src="https://img-blog.csdnimg.cn/20190821154748445.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System.IO;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BuildAB : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    //[MenuItem(&quot;AssetBundle/Package (Default)&quot;)]</span><br><span class="line">    [MenuItem(&quot;Assets/Build AssetBundles&quot;)]</span><br><span class="line">    static void BuildAllAssetBundles()</span><br><span class="line">    &#123;</span><br><span class="line">        string assetBundleDirectory = &quot;Assets/AssetBundles&quot;;</span><br><span class="line">        if (!Directory.Exists(assetBundleDirectory))</span><br><span class="line">        &#123;</span><br><span class="line">            Directory.CreateDirectory(assetBundleDirectory);</span><br><span class="line">        &#125;</span><br><span class="line">        BuildPipeline.BuildAssetBundles(assetBundleDirectory, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="www下载ab包"><a href="#www下载ab包" class="headerlink" title="www下载ab包"></a>www下载ab包</h2><p>把ab包上传到服务器以后，就要下载了，这里我用的是www下载，直接上代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">IEnumerator wwwDown() &#123;</span><br><span class="line"></span><br><span class="line">        www= new WWW(url);//url链接记得带ab包的后缀，没有就不加</span><br><span class="line">        yield return www;</span><br><span class="line">        if (www.isDone) &#123;</span><br><span class="line">            isDown = false;</span><br><span class="line">            Destroy(Lodding.gameObject);</span><br><span class="line">            AssetBundle ab = www.assetBundle;</span><br><span class="line">            Scenes = ab.LoadAsset&lt;GameObject&gt;(&quot;scenes.prefab&quot;);</span><br><span class="line">            dancerMan = ab.LoadAsset&lt;GameObject&gt;(&quot;DancerMan.prefab&quot;);</span><br><span class="line">            ab.Unload(false);//false:只卸载用过的资源  true：卸载全部资源</span><br><span class="line">            Train.gameObject.SetActive(true);</span><br><span class="line">            //Instantiate(go);</span><br><span class="line">        &#125;</span><br><span class="line">        //释放资源（非托管资源）</span><br><span class="line">        www.Dispose();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="下载完成后，最好记得unload-ab包，如果你是存入本地，直接true-如果是像我一样只是临时放入变量中的话，就false"><a href="#下载完成后，最好记得unload-ab包，如果你是存入本地，直接true-如果是像我一样只是临时放入变量中的话，就false" class="headerlink" title="下载完成后，最好记得unload ab包，如果你是存入本地，直接true,如果是像我一样只是临时放入变量中的话，就false"></a>下载完成后，最好记得unload ab包，如果你是存入本地，直接true,如果是像我一样只是临时放入变量中的话，就false</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;www下载远程ab包&quot;&gt;&lt;a href=&quot;#www下载远程ab包&quot; class=&quot;headerlink&quot; title=&quot;www下载远程ab包&quot;&gt;&lt;/a&gt;www下载远程ab包&lt;/h3&gt;&lt;p&gt;  最近一直在忙WebGL的项目，简直蛋疼，尤其是内存方面，什么都得节省，不
      
    
    </summary>
    
    
    
      <category term="webgl" scheme="http://shuaiqzh.com/tags/webgl/"/>
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
      <category term="AssetBundle" scheme="http://shuaiqzh.com/tags/AssetBundle/"/>
    
      <category term="服务器" scheme="http://shuaiqzh.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="WWW下载" scheme="http://shuaiqzh.com/tags/WWW%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>unitywebgl部署在GitHub上访问</title>
    <link href="http://shuaiqzh.com/unitywebgl%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A%E8%AE%BF%E9%97%AE/"/>
    <id>http://shuaiqzh.com/unitywebgl%E9%83%A8%E7%BD%B2%E5%9C%A8GitHub%E4%B8%8A%E8%AE%BF%E9%97%AE/</id>
    <published>2019-08-10T04:14:44.000Z</published>
    <updated>2019-08-25T09:25:42.947Z</updated>
    
    <content type="html"><![CDATA[<p>生成webgl包就不说了，直接正题</p><p>在GitHub上新建一个仓库，标题随意</p><p>然后建一个本地仓库，把GitHub上新建仓库clone下来，clone成功的话就会出现一个readme文件</p><p>把webgl项目放在本地的文件夹里 ，然后commit</p><p>最重要的步骤来了 提交以后进入GitHub仓库的设置页面，把github pages的source原本的none 改成master branch</p><p>然后它就会自动刷新，并生成你的项目链接 这样就可以访问了 是不是so easy<br><img src="https://img-blog.csdnimg.cn/20190805163401550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MTkwMTI5,size_16,color_FFFFFF,t_70" alt="GitHubPages"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生成webgl包就不说了，直接正题&lt;/p&gt;
&lt;p&gt;在GitHub上新建一个仓库，标题随意&lt;/p&gt;
&lt;p&gt;然后建一个本地仓库，把GitHub上新建仓库clone下来，clone成功的话就会出现一个readme文件&lt;/p&gt;
&lt;p&gt;把webgl项目放在本地的文件夹里 ，然后com
      
    
    </summary>
    
    
    
      <category term="webgl" scheme="http://shuaiqzh.com/tags/webgl/"/>
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
      <category term="github" scheme="http://shuaiqzh.com/tags/github/"/>
    
      <category term="githubPages" scheme="http://shuaiqzh.com/tags/githubPages/"/>
    
  </entry>
  
  <entry>
    <title>webgl测试（unity2018.1.9f）</title>
    <link href="http://shuaiqzh.com/2018-1-9f%EF%BC%89/"/>
    <id>http://shuaiqzh.com/2018-1-9f%EF%BC%89/</id>
    <published>2019-08-10T04:12:05.000Z</published>
    <updated>2019-08-25T09:26:46.161Z</updated>
    
    <content type="html"><![CDATA[<p>首先就是要有webgl支持 才能switch（unity里直接可以下）</p><p>一些主要的注意事项，这个博主都有写</p><p><a href="https://blog.csdn.net/k20132014/article/details/78448142" target="_blank" rel="noopener">https://blog.csdn.net/k20132014/article/details/78448142</a></p><p>其实很多默认就好 唯一遇到的坑就是 那个 strip Engine Code 如果勾选了一些功能就没有了</p><p>比如音频组件 就没作用了</p><p>还有就是build之后 直接打开index.html 没用 只能部署到服务器上 通过链接访问 我是部署到了GitHub上 然后就可以看到你的项目了</p><p>还有一个就是如果在移动端的浏览器打开 他会提醒部分移动端设备不能使用 不过我用的小米8可以使用 点完ok 继续等待加载即可</p><p>下面是我部署在github上的webgl测试</p><p><a href="http://shuaiqzh.com/UnityWebGl/">http://shuaiqzh.com/UnityWebGl/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先就是要有webgl支持 才能switch（unity里直接可以下）&lt;/p&gt;
&lt;p&gt;一些主要的注意事项，这个博主都有写&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/k20132014/article/details/78448142&quot; ta
      
    
    </summary>
    
    
    
      <category term="webgl" scheme="http://shuaiqzh.com/tags/webgl/"/>
    
      <category term="unity" scheme="http://shuaiqzh.com/tags/unity/"/>
    
  </entry>
  
</feed>
